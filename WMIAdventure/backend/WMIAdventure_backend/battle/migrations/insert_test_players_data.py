# Generated by Django 3.2.1 on 2021-06-07 20:48
import random

from django.db import migrations

from IngameUsers.models import UserProfile, Semester, Deck
from cards.models import Card, CardInfo, CardLevel, CardEffect, CardLevelEffects
from users.models import User


def create_test_cards():
    """
    Creates test cards if there are less than 5 cards in the database.
    At least 5 cards are required to create test users.

    :return: None
    """
    cards_count = len(Card.objects.all())
    while cards_count < 5:
        create_test_card(cards_count)
        cards_count += 1


def create_test_card(cards_count: int):
    """
    Creates test card.

    :param cards_count: How many cards are in the database. Will be used to generate unique test card name.
    :return: None
    """
    test_card_info = CardInfo.objects.create(name=f"test_card{cards_count}", tooltip="test_card")
    test_card = Card.objects.create(info=test_card_info, level=CardLevel.objects.get(pk=1))
    test_card.effects.create(card_effect=CardEffect.objects.get(pk=CardEffect.EffectId.DMG),
                             target=CardLevelEffects.Target.OPPONENT, power=cards_count, range=cards_count)


def create_test_players_data(apps, schema_editor):
    """
    Creates data in database for test users. These test users will be used to test battle API calls.

    :param apps:
    :param schema_editor:
    :return: None
    """

    create_test_cards()

    # Create 5 test players.
    test_users_count = 5
    for test_player_num in range(test_users_count):
        create_test_player_data(test_player_num)


def create_test_player_data(player_num: int):
    """
    Creates all data in database for test users to be able to fight in battle.
    Creates test user's deck and all data needed to create deck.

    :param player_num: Test player num, must be unique, will be used to create unique name, email, etc.
    :return: None
    """
    # Create test User
    test_user = User.objects.create_user(f"test_user{player_num}", f"test_user{player_num}@company.com")
    # Create test UserProfile
    test_user_profile1 = UserProfile.objects.create(user=test_user, displayedUsername=f"test_user{player_num}",
                                                    semester=Semester.objects.get(pk=1))
    # Create test UserCards
    random_cards = random.sample(list(Card.objects.all()), k=5)
    test_user_cards = []
    for i in range(5):
        test_user_card = test_user_profile1.user_cards.create(card=random_cards[i])
        test_user_cards.append(test_user_card)

    # Create test Deck
    test_deck = Deck.objects.create(card1=test_user_cards[0], card2=test_user_cards[1],
                                    card3=test_user_cards[2], card4=test_user_cards[3],
                                    card5=test_user_cards[4])

    # Create test UserDeck
    test_user_deck = test_user_profile1.user_decks.create(deck_number=1, deck=test_deck)


class Migration(migrations.Migration):
    dependencies = [
        ('cards', '0008_refresh_effects_list'),
        ('IngameUsers', '0003_auto_20210514_0253'),
        ('users', '0001_initial')
    ]

    operations = [
        migrations.RunPython(create_test_players_data),
    ]
